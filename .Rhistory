x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(arr784, nrow=28)[,28:1], col=col, ...)
}
setwd("~/MachineLearningPres/Untitled")
load_mnist()
summary(train$y)
show_digit()
show_digit(1)
show_digit(test[1])
train[[1]]
show_digit(train$x[5,])
show_digit(train$x[1,])
show_digit(train$x[1,]); train$y[1,]
show_digit(train$x[1,]); train$y[1]
setwd("~/MachineLearningPres/Untitled")
library(magrittr)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(arr784, nrow=28)[,28:1], col=col, ...)
}
load_mnist()
RRhelpr::machineLearner(train$x, train$y)
RRhelpr::machineLearner(train$x, train$y %>% as.factor)
modpca <- stats::prcomp(train$x, center=TRUE, scale.=TRUE)
trainset <- as.data.frame(train$x)
trainset$y <- train$y
trainset <- as.data.frame(train$x);trainset$y <- train$y
RRhelpr::machineLearner(trainset, "y")
modpca <- stats::prcomp(train$x)
prop.pca = modpca$sdev^2/sum(modpca$sdev^2)
plotme <- RRhelpr::ggbiplot(modpca, obs.scale = 1, var.scale = 1, groups = train$y,
ellipse = TRUE, circle = TRUE) +
scale_color_RR(theme="RR_Health") + theme_RR()
plotme <- RRhelpr::ggbiplot(modpca, obs.scale = 1, var.scale = 1, groups = train$y,
ellipse = TRUE, circle = TRUE) +
RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR()
plotme
RRhelpr::ggbiplot(modpca, obs.scale = 1, var.scale = 1, groups = train$y,
ellipse = TRUE, circle = TRUE) +
RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR()
RRhelpr::ggbiplot(modpca, obs.scale = 1, var.scale = 1, groups = trainset$y,
ellipse = TRUE, circle = TRUE) +
RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR()
RRhelpr::ggbiplot(modpca, obs.scale = 1, var.scale = 1, groups = trainset$y,
ellipse = TRUE, circle = TRUE)
plotme <- ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=var_to_learn)) +
ggplot2::geom_point(size=2) + scale_color_RR(theme="RR_Health") + theme_RR() +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""), color = train$y)
plotme <- ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=train$y)) +
ggplot2::geom_point(size=2) + RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR() +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=train$y)) +
ggplot2::geom_point(size=2) + RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR() +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
plotme
plotme <- ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::scale_color_RR(theme="RR_Health") + RRhelpr::theme_RR() +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
plotme
modpca$rotation
?prcomp
modpca$x
modpca$x[,1]
modpca$x[1,]
modpca$scale
modpca$x
modpca$rotations[1,]
modpca$rotations
modpca$rotation
modpca$rotation[1,]
show_digit(modpca$rotation[1,])
show_digit(modpca$rotation[2,])
show_digit(modpca$rotation[3,])
show_digit(modpca$rotation[10,])
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
show_digit(modpca$rotation[,5])
library(magrittr)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(arr784, nrow=28)[,28:1], col=col, ...)
}
load_mnist()
par(mfrow = c(2,2))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow = c(1,1))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
par(mfrow = c(2,2))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow = c(1,1))
?image
image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12), ...)
image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
plot(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
show_digit(modpca$rotation[,1],par(mfrow = c(2,2)))
show_digit(modpca$rotation[,1]))
show_digit(modpca$rotation[,1])
par(mfrow=c(2,2))
image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,2], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,3], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,4], nrow=28)[,28:1], col=gray(12:1/12))
#show_digit(modpca$rotation[,1])
#show_digit(modpca$rotation[,2])
#show_digit(modpca$rotation[,3])
#show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
par(mfrow=c(2,2))
image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,3], nrow=28)[,28:1], col=gray(12:1/12))
par(mfrow=c(2,2))
image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,2], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,3], nrow=28)[,28:1], col=gray(12:1/12))
image(matrix(modpca$rotation[,4], nrow=28)[,28:1], col=gray(12:1/12))
#show_digit(modpca$rotation[,1])
#show_digit(modpca$rotation[,2])
#show_digit(modpca$rotation[,3])
#show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
par(mfrow=c(2,2))
#image(matrix(modpca$rotation[,1], nrow=28)[,28:1], col=gray(12:1/12))
#image(matrix(modpca$rotation[,2], nrow=28)[,28:1], col=gray(12:1/12))
#image(matrix(modpca$rotation[,3], nrow=28)[,28:1], col=gray(12:1/12))
#image(matrix(modpca$rotation[,4], nrow=28)[,28:1], col=gray(12:1/12))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
prop.pca
prop.pca[1:4]
RRhelpr::machineLearner(trainset, "y")
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
?scale_color_brewer
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette=2)
library(ggplot2)
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette=2) +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
?scale_color_manual
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette=1) +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette=Accent) +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Accent") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
install.packages(runr)
install.packages("runr")
install.packages("runr")
library(magrittr)
library(ggplot2)
library(runr)
library(magrittr)
library(ggplot2)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(arr784, nrow=28)[,28:1], col=col, ...)
}
load_mnist()
trainset <- as.data.frame(train$x);trainset$y <- train$y
library(magrittr)
library(ggplot2)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(arr784, nrow=28)[,28:1], col=col, ...)
}
load_mnist()
trainset <- as.data.frame(train$x);trainset$y <- train$y
show_digit(train$x[1,])
#Data has been loaded above
#function: prcomp from the stats package. The stats package is installed by default
#  since all our values have the same scale, we will not scale and recenter; this could be done
#  by setting prcomp(train$x, center=TRUE, scale.=TRUE)
modpca <- prcomp(train$x)
prop.pca <- modpca$sdev^2/sum(modpca$sdev^2)
par(mfrow=c(2,2))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
install.packages("feather")
write_feather(trainset, "trainset.feather")
library(feather)
write_feather(trainset, "trainset.feather")
testset <- as.data.frame(test$x);testset$y <- test$y
write_feather(trainset, "testset.feather")
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
library(magrittr)
library(ggplot2)
library(feather)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(unlist(arr784), nrow=28)[,28:1], col=col, ...)
}
load_mnist()
trainset <- as.data.frame(train$x);trainset$y <- train$y
testset <- as.data.frame(test$x);testset$y <- test$y
trainset %<>% subset(y %in% c("0","8","2","7","9"))
write_feather(trainset, "trainset.feather")
write_feather(trainset, "testset.feather")
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
#Data has been loaded above
#function: prcomp from the stats package. The stats package is installed by default
#  since all our values have the same scale, we will not scale and recenter; this could be done
#  by setting prcomp(train$x, center=TRUE, scale.=TRUE)
unlabeled <- trainset[, 1:784]
modpca <- prcomp(unlabeled)
prop.pca <- modpca$sdev^2/sum(modpca$sdev^2)
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(train$y))) +
ggplot2::geom_point(size=2)
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(trainset$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
par(mfrow=c(2,2))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
modpca %>% plot
trainset %<>% subset(y %in% c("0","8","2","7"))
trainset %<>% subset(y %in% c("0","8","2","7"))
testset %<>% subset(y %in% c("0","8","2","7"))
show_digit(trainset[1, 1:784])
#Data has been loaded above
#function: prcomp from the stats package. The stats package is installed by default
#  since all our values have the same scale, we will not scale and recenter; this could be done
#  by setting prcomp(train$x, center=TRUE, scale.=TRUE)
unlabeled <- trainset[, 1:784]
modpca <- prcomp(unlabeled)
prop.pca <- modpca$sdev^2/sum(modpca$sdev^2)
par(mfrow=c(2,2))
show_digit(modpca$rotation[,1])
show_digit(modpca$rotation[,2])
show_digit(modpca$rotation[,3])
show_digit(modpca$rotation[,4])
par(mfrow=c(1,1))
plot(prop.pca)
?image
show_digit(modpca$rotation[,1],axes=FALSE)
par(mfrow=c(2,2))
show_digit(modpca$rotation[,1],axes=FALSE)
show_digit(modpca$rotation[,2],axes=FALSE)
show_digit(modpca$rotation[,3],axes=FALSE)
show_digit(modpca$rotation[,4],axes=FALSE)
par(mfrow=c(1,1))
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(trainset$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
plot(prop.pca[1:10])
ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(trainset$y))) +
ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
#ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(trainset$y))) +
#        ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
#        ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
#                      y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
plot_ly(as.data.frame(modpca$x), x=~PC1, y=~PC2, z=~PC3, color = as.factor(trainset$y), colors = colors, type = 'scatter3d', mode = "markers", hoverinfo = 'text',
text = ~paste('Row: ', rownames(modpca$x)), marker = list(size = 6))
library(plotly)
#ggplot2::ggplot(data=as.data.frame(modpca$x[,1:2]), ggplot2::aes(x=PC1, y=PC2, color=as.factor(trainset$y))) +
#        ggplot2::geom_point(size=2) + RRhelpr::theme_RR() + scale_color_brewer(type="qual", palette="Set3") +
#        ggplot2::labs(x = paste("PC1 (", scales::percent(prop.pca[1]), " explained var.)", sep=""),
#                      y = paste("PC2 (", scales::percent(prop.pca[2]), " explained var.)", sep=""))
plot_ly(as.data.frame(modpca$x), x=~PC1, y=~PC2, z=~PC3, color = as.factor(trainset$y), colors = colors, type = 'scatter3d', mode = "markers", hoverinfo = 'text',
text = ~paste('Row: ', rownames(modpca$x)), marker = list(size = 6))
modpca$rotation
modpca$rotation[,1]
modpca$rotation[,1]
show_digit(modpca$rotation[,1],axes=FALSE)
#plot eigenvectors
par(mfrow=c(2,2))
show_digit(modpca$rotation[,1],axes=FALSE)
show_digit(modpca$rotation[,2],axes=FALSE)
show_digit(modpca$rotation[,3],axes=FALSE)
show_digit(modpca$rotation[,4],axes=FALSE)
par(mfrow=c(1,1))
plot_ly(as.data.frame(modpca$x), x=~PC1, y=~PC2, z=~PC3, color = as.factor(trainset$y), colors = colors, type = 'scatter3d')
plot_ly(as.data.frame(modpca$x), x=~PC1, y=~PC2, z=~PC3, color = as.factor(trainset$y), type = 'scatter3d')
library(magrittr)
library(ggplot2)
library(feather)
library(plotly)
load_mnist <- function() {
load_image_file <- function(filename) {
ret = list()
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
ret$n = readBin(f,'integer',n=1,size=4,endian='big')
nrow = readBin(f,'integer',n=1,size=4,endian='big')
ncol = readBin(f,'integer',n=1,size=4,endian='big')
x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
close(f)
ret
}
load_label_file <- function(filename) {
f = file(filename,'rb')
readBin(f,'integer',n=1,size=4,endian='big')
n = readBin(f,'integer',n=1,size=4,endian='big')
y = readBin(f,'integer',n=n,size=1,signed=F)
close(f)
y
}
train <<- load_image_file('mnist/train-images.idx3-ubyte')
test <<- load_image_file('mnist/t10k-images.idx3-ubyte')
train$y <<- load_label_file('mnist/train-labels.idx1-ubyte')
test$y <<- load_label_file('mnist/t10k-labels.idx1-ubyte')
}
show_digit <- function(arr784, col=gray(12:1/12), ...) {
image(matrix(unlist(arr784), nrow=28)[,28:1], col=col, ...)
}
load_mnist()
trainset <- as.data.frame(train$x);trainset$y <- as.factor(train$y)
testset <- as.data.frame(test$x);testset$y <- as.factor(test$y)
trainset %<>% subset(y %in% c("1","4","9")) %>% droplevels
testset %<>% subset(y %in% c("1","4","9")) %>% droplevels
write_feather(trainset, "trainset.feather")
write_feather(testset, "testset.feather")
sessionInfo()
